"""
Django settings for this project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-zabu*^#mr555#p$cnwqbf$@3w=k40b=7x8s%qt_b-q$2p^=jcd'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework.authtoken',

    'file_upload',
    'index',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ControlHub.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ControlHub.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


_DATABASES_SQLITE3 = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


DATABASES = _DATABASES_SQLITE3


# endregion


# region # ---是否自动创建pg数据库 & 自动配置数据库的中文解释器

USE_AUTO_PG_CONF = 0    # 是否自动创建pg数据库 & 自动配置数据库的中文解释器
if USE_AUTO_PG_CONF:
    from tools import db_utils

    pg_conf = DATABASES.get('default')

    assert 'postgresql' in DATABASES.get('default').get('ENGINE'), 'USE_AUTO_PG_CONF为True时, 数据库必须是postgresql!'
    is_first_create_db = db_utils.create_db_if_not_exist(pg_conf)

    USE_PG_SEARCH = 0       # 是否启用pg中文检索引擎
    if is_first_create_db:
        if USE_PG_SEARCH:
            db_utils.use_zhparser_in_db(pg_conf)
            print('*** 初始化中文检索pg库成功, 请重新migrate数据库.')
        else:
            print('~~~ 初始化pg数据库成功, 请重新migrate数据库.')
        exit()

# endregion


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

# USE_TZ = True
USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# STATIC_URL = '/static/'
STATIC_URL = '/api/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_URL = '/api/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

CLIENT_URL = '/'
CLIENT_ROOT = '/opt/client/h5/dist/'


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    # 日期和时间的输出格式
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'DATE_FORMAT': '%Y-%m-%d',
}

DATA_UPLOAD_MAX_NUMBER_FIELDS = 300000  # django的admin界面一次性上传的最大条数

BD_DEFAULT_EXPORT_FORMAT = 'xlsx'       # bddjango后台数据的默认导出格式


# --- SimpleUI相关设置
USE_SIMPLE_UI = 1
if USE_SIMPLE_UI:
    """
    SimpleUI相关设置
    """

    INSTALLED_APPS.insert(0, 'simpleui')

    # 隐藏右侧SimpleUI广告链接和使用分析
    SIMPLEUI_HOME_INFO = False
    SIMPLEUI_ANALYSIS = False
    SIMPLEUI_HOME_ACTION = False  # 最近动作

    # 设置默认主题，指向主题css文件名。Admin Lte风格
    SIMPLEUI_DEFAULT_THEME = 'highdmin.css'

    # ---------------------- 后面就得具体项目具体设置了 ------------------------------
    # 去掉默认Logo或换成自己Logo链接
    SIMPLEUI_LOGO = "https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fbpic.588ku.com%2Felement_origin_min_pic%2F01%2F10%2F90%2F5656f59a1dc741d.jpg&refer=http%3A%2F%2Fbpic.588ku.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659661198&t=1f75b04aee9a54c5fa7ed67ef0cb8b7d"
    SIMPLEUI_CONFIG = {
        # 是否使用系统默认菜单，自定义菜单时建议关闭。
        'system_keep': True,
        'dynamic': True,
        # 'menu_display': ['认证和授权', '多级菜单测试'],
    }

    # 修改左侧菜单首页设置
    SIMPLEUI_HOME_TITLE = '首页'  # 首页标题
    SIMPLEUI_HOME_ICON = 'fa fa-home'  # 首页图标

    # 设置右上角Home图标跳转链接，会以另外一个窗口打开
    # SIMPLEUI_INDEX = 'http://bodexiong.vip:2101/api/admin/'
    SIMPLEUI_INDEX = '/'

    # --- icon定义 https://simpleui.72wo.com/docs/simpleui/QUICK.html#%E8%AF%B4%E6%98%8E
    SIMPLEUI_ICON = {
        '正式报名表单': 'fas fa-solid fa-list',
        '预报名表': 'fas fa-solid fa-align-justify',
        '专业选项表': 'fas fa-file-word',
        '轮播图表': 'fas fa-images',
        '系统信息表': 'fas fa-info-circle',
        '地区树节点表': 'fas fa-solid fa-city',
        '组': 'fas fa-users',
        '验证码表': 'fas fa-solid fa-user-lock',
        'IP表': 'fas fa-solid fa-location-arrow',
        '用户IP关系表': 'fas fa-address-book',
        '用户表': 'fas fa-solid fa-user',
    }


# --- 解决跨域问题 corsheaders, django-cors-headers
USE_CORS_HEADERS = 1
if USE_CORS_HEADERS:
    """
    解决跨域问题

    - 在MIDDLEWARE的第一行加入  ['corsheaders.middleware.CorsMiddleware',     # 注意顺序, 放最前面]
    - 复制本块代码至settings中
    """
    MIDDLEWARE.insert(0, 'corsheaders.middleware.CorsMiddleware')

    # 跨域增加忽略
    CORS_ALLOW_CREDENTIALS = True
    CORS_ORIGIN_ALLOW_ALL = True

    CORS_ALLOW_METHODS = (
        'DELETE',
        'GET',
        'OPTIONS',
        'PATCH',
        'POST',
        'PUT',
        'VIEW',
    )

    CORS_ALLOW_HEADERS = (
        'XMLHttpRequest',
        'X_FILENAME',
        'accept-encoding',
        'authorization',
        'content-type',
        'dnt',
        'origin',
        'user-agent',
        'x-csrftoken',
        'x-requested-with',
        'Pragma',
    )

    CORS_ORIGIN_WHITELIST = ('https://*',)


# --- 富文本编辑器ckeditor配置
USE_CKEDITOR = 0
if USE_CKEDITOR:
    CKEDITOR_UPLOAD_PATH = 'ckeditor'  # 上传图片保存路径
    CKEDITOR_CONFIGS = {
        # django-ckeditor默认使用default配置      https://github.com/django-ckeditor/django-ckeditor#plugins
        'default': {
            # 编辑器宽度自适应
            'width':'auto',
            'height':'60%',
            # tab键转换空格数
            'tabSpaces': 4,
            # 工具栏风格
            'toolbar': 'Custom',
            # 工具栏按钮
            'toolbar_Custom': [
                ['Bold', 'Italic', 'Underline', 'RemoveFormat', 'Blockquote'],  # 字体风格
                ['Format', 'FontSize'],  # 标题 大小 | 字体  'Font',
                ['TextColor', 'BGColor'],  # 字体颜色
                ['NumberedList', 'BulletedList'],            # 列表
                ['Smiley', 'Table', 'CodeSnippet', 'Link', 'Unlink'],  # 表情 表格 代码块 链接
                ['Maximize'],            # 最大化
            ],
            # 加入代码块插件
            'extraPlugins': ','.join(['codesnippet']),
        }
    }


